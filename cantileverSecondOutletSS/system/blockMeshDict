/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.01;

// variables
cantHeight 0.5;
cantLength 2.0;
cantDeflect 0.0;

W1 1;
W2 2;
WC $cantLength; // responsible for cantilever length
W3 3;
// width of outlet 1
WO1 0.5;
// width of outlet 2
WO2 0.5;
// position of outlet 2
WO2Start 0.5;
WO2End #calc "$WO2Start + $WO2";
// position of outlet 1
WO1Start 1.5;
WO1End #calc "$WO1Start + $WO1";

H1 1;
H2 2;
// the following variables are used to adjust the height of the cantilever if there is a deflection
HC1 #calc "$H2 + $cantDeflect"; // responsible for cantilever deflection, the height of the bottom right corner of the cantilever
HC11 #calc "$H2 - (($H2 - $HC1)*($W1)*(1/$WC))";
HC2 #calc "$HC1 + $cantHeight";
HC22 #calc "$H2 + $cantHeight - (($H2 - $HC1)*($WO2End)*(1/$WC))";
HC22O2 #calc "$H2 + $cantHeight - (($H2 - $HC1)*($WO2Start)*(1/$WC))";
HC22O1 #calc "$H2 + $cantHeight - (($H2 - $HC1)*($WO1Start)*(1/$WC))";
H3 #calc "$H2 + $cantHeight";
H4 #calc "$H3 + 1";
H5 #calc "$H4 + 1";

D1 1;

// mesh
xcells 40;
ycells 40;
zcells 1;

xcellsOutlet1 #calc "$xcells * $WO1";
xcellsOutlet2 #calc "$xcells * $WO2";
xcellsBlock5 #calc "$xcells * $WO2Start";
xcellsBlock7 #calc "$xcells * ($WO1Start - $WO2End)";
xcellsBlocksRight #calc "$xcells * ($W3 - $WC)";
ycellsHalf #calc "$ycells * 0.5";


vertices
(
    // back plane
    ($W1 0 0) // vertex 0
    ($W2 0 0) // vertex 1
    ($W2 $H1 0) // vertex 2
    ($W3 $H1 0) // vertex 3
    ($W3 $H2 0) // vertex 4
    ($W3 $H3 0) // vertex 5
    ($W3 $H4 0) // vertex 6
    ($WO1End $H4 0) // vertex 7
    ($WO1End $H5 0) // vertex 8
    ($WO1Start $H5 0) // vertex 9
    ($WO1Start $H4 0) // vertex 10
    ($WO2End $H4 0) // vertex 11
    ($WO2End $H5 0) // vertex 12
    ($WO2Start $H5 0) // vertex 13
    ($WO2Start $H4 0) // vertex 14
    (0 $H4 0) // vertex 15
    (0 $H3 0) // vertex 16
    (0 $H2 0) // vertex 17
    (0 $H1 0) // vertex 18
    ($W1 $H1 0) // vertex 19
    ($WC $HC1 0) // vertex 20
    ($WC $HC2 0) // vertex 21
    ($W1 $HC11 0) // vertex 22
    ($WO2End $HC22 0) // vertex 23
   
    // front plane 
    ($W1 0 $D1) // vertex 24
    ($W2 0 $D1) // vertex 25
    ($W2 $H1 $D1) // vertex 26
    ($W3 $H1 $D1) // vertex 27
    ($W3 $H2 $D1) // vertex 28
    ($W3 $H3 $D1) // vertex 29
    ($W3 $H4 $D1) // vertex 30
    ($WO1End $H4 $D1) // vertex 31
    ($WO1End $H5 $D1) // vertex 32
    ($WO1Start $H5 $D1) // vertex 33
    ($WO1Start $H4 $D1) // vertex 34
    ($WO2End $H4 $D1) // vertex 35
    ($WO2End $H5 $D1) // vertex 36
    ($WO2Start $H5 $D1) // vertex 37
    ($WO2Start $H4 $D1) // vertex 38
    (0 $H4 $D1) // vertex 39
    (0 $H3 $D1) // vertex 40
    (0 $H2 $D1) // vertex 41
    (0 $H1 $D1) // vertex 42
    ($W1 $H1 $D1) // vertex 43
    ($WC $HC1 $D1) // vertex 44
    ($WC $HC2 $D1) // vertex 45
    ($W1 $HC11 $D1) // vertex 46
    ($WO2End $HC22 $D1) // vertex 47
    
    // extra vertices
    ($WO2Start $HC22O2 0) // vertex 48
    ($WO1Start $HC22O1 0) // vertex 49
    ($WO2Start $HC22O2 $D1) // vertex 50
    ($WO1Start $HC22O1 $D1) // vertex 51
);

blocks
(
    hex (0 1 2 19 24 25 26 43) ($xcells $ycells $zcells) 
    simpleGrading 
    (
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1 
	1
    ) // block 0
    hex (18 19 22 17 42 43 46 41) ($xcells $ycells $zcells) 
    simpleGrading 
    (
	4 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1
    ) // block 1
    hex (19 2 20 22 43 26 44 46) ($xcells $ycells $zcells) 
    simpleGrading 
    (
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1
    ) // block 2
    hex (2 3 4 20 26 27 28 44) ($xcellsBlocksRight $ycells $zcells) 
    simpleGrading 
    (
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1
    ) // block 3
    hex (20 4 5 21 44 28 29 45) ($xcellsBlocksRight $ycellsHalf $zcells) 
    simpleGrading 
    (
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1 
	1
    ) // block 4
    hex (16 48 14 15 40 50 38 39) ($xcellsBlock5 $ycells $zcells) 
    simpleGrading 
    (
	4  
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1
    ) // block 5
    hex (48 23 11 14 50 47 35 38) ($xcellsOutlet2 $ycells $zcells) 
    simpleGrading 
    ( 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1
    ) // block 6
    hex (23 49 10 11 47 51 34 35) ($xcellsBlock7 $ycells $zcells) 
    simpleGrading 
    (
	1 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1
    ) // block 7
    hex (49 21 7 10 51 45 31 34) ($xcellsOutlet1 $ycells $zcells) 
    simpleGrading 
    ( 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1
    ) // block 8
    hex (21 5 6 7 45 29 30 31) ($xcellsBlocksRight $ycells $zcells) 
    simpleGrading 
    (
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25))  
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25)) 
	1
    ) // block 9
    hex (14 11 12 13 38 35 36 37) ($xcellsOutlet2 $ycells $zcells) 
    simpleGrading 
    ( 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25))  
	1 
	1
    ) // block 10
    hex (10 7 8 9 34 31 32 33) ($xcellsOutlet1 $ycells $zcells) 
    simpleGrading 
    ( 
	((0.3 0.4 4) (0.4 0.2 1) (0.3 0.4 0.25))  
	1 
	1
    ) // block 11
);

edges
(
);

boundary
(
    inlet 
    {
	type patch;
	faces
	(
	    (0 1 25 24)
	);
    }
    outlet1
    {
	type patch;
	faces
	(
	    (8 9 33 32)
	);
    }
    outlet2
    {
	type patch;
	faces
	(
	    (12 13 37 36)
	);
    }
    walls
    {
	type wall;
	faces
	(
	(0 24 43 19)
	(18 19 43 42)
	(17 18 42 41)
	(15 16 40 39)
	(15 39 38 14)
	(13 14 38 37)
	(12 36 35 11)
	(10 11 35 34)
	(9 10 34 33)
	(8 32 31 7)
	(6 7 31 30)
	(6 30 29 5)
	(5 29 28 4)
	(4 28 27 3)
	(2 3 27 26)
	(1 2 26 25)
	);
    }
    cantilever
    {
	type wall;
	faces 
	(
	(22 17 41 46)
	(20 22 46 44)
	(21 20 44 45)
	(51 49 21 45)
	(23 49 51 47)
	(48 23 47 50)
	(16 48 50 40)
	);
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (0 19 2 1)
            (18 17 22 19)
            (19 22 20 2)
            (2 20 4 3)
            (20 21 5 4)
	    (16 15 14 48)
	    (48 14 11 23)
	    (23 11 10 49)
            (49 10 7 21)
            (21 7 6 5)
            (14 13 12 11)
            (10 9 8 7)
            (25 26 43 24)
            (43 46 41 42)
            (26 44 46 43)
            (27 28 44 26)
            (28 29 45 44)
            (50 38 39 40)
            (47 35 38 50)
            (51 34 35 47)
            (45 31 34 51)
            (29 30 31 45)
	    (35 36 37 38)
	    (31 32 33 34)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
